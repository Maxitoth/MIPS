The MIPS code entered in the text file testo.txt is simulated. This is to obtain data related to the pipeline.
The code must have been tested on Mars (compiled and run). It should be error-free.

To start the program, type in the command console "python esegui_simulatore.py testo.txt"
(python or python3, testo.txt is the path of the text).

On the esegui_simulatore.py file, there is the main function and the input values. In addition, four json files are compiled with all the data.
The program should be started through shell, and there are various input values that can be entered from the command line, although all have a default value.
The only input that must be entered is the text (enter the path of the text in which the MIPS code is present).

You can choose whether to run the simulation with forwarding or not, with the branch instructions in the decode or execute phase, whether to simulate the program counter
and to display which instructions are in the pipeline at a certain clock cycle.
Additionally, you can enable messages for each hazard found and create an excel file with up to four sheets to view the results (you need to install xlsxwriter with
pip install xlsxwriter).
(input values from the command line, use python esegui_simulatore.py -h to see the various inputs and how to write them)
Total clock cycles and clock cycles present in each code loop cycle are also shown. (Works well with a single loop and should also work with sequential loops or loops within loops, but I can't guarantee that it is always correct for large programs or with many loops)

The simulator has its limits. These are written in various comments at the beginning of the simulatore.py file (in italian eheh).
There are also other comments on istruzioni_mips.py about how new instructions should be written after the incrementa_program_counter method of the Instructions class.

Data of type .byte, .half, .word, .ascii, .asciiz are managed. The only character not to be used is 'Âµ' (used in the analysis of .ascii and .asciiz data) and the empty string should be used alone if .ascii or .asciiz are used (notes on simulatore.py in the comments).

Pseudoinstructions are not included or added to the text. So if you jump to the address of a pseudoinstruction (possible through the jalr instruction), there will certainly be an error during the MIPS code simulation.

To add instructions:

(REQUIRED PART) In simulatore.py:

Add the instruction to the instruction set (if the instruction is of jump or branch type also add it to the corresponding set, the same goes for store and load if you want to add particular instructions like for example lwl. In general, all normal cases have been managed (lb, lbu, lh, lhu, lw, sb, sh, sw)). Only the jr is missing for the jumps.
The branch and link instructions are a particular case not managed. The code in trova_valori_per_pipeline would probably need to be modified.

(REQUIRED PART) In istruzioni_mips.py:

1) Add a method by naming it like the MIPS instruction to simulate.
2) The method must always start with Instructions.increment_program_counter(self) (even if the program counter is not simulated)
3) Depending on the type of instruction, refer to already implemented instructions unless it is a new type of instruction.
4) Each method has the inputs of the simulated instruction (beq has 3 inputs, beqz has 2 inputs, etc... except for some cases like the jump instructions, the reasoning is always this)
5) Example of how to start: If I have beq $t1, $t2, Cycl the method is of this type: beq(self, register_one_or_integer_one, register_two_or_integer_two, string). Implement the various checks (if I have a register or an integer) and check if register_one_or_integer_one == register_two_or_integer_two. Since this is a jump instruction, I need to return a boolean (jump) as True or False in addition to the string. For non-jump instructions, the reasoning is the same, just update the integer of the register (usually called destination_register (in italian "registro_destinazione")) and return a string (output is not necessary).
6) If an instruction can be written in multiple ways (different number of inputs) a tuple is used (tuple_values). You need to get the values from the tuple, but the reasoning is the same.
7) If the instruction allows jumps in the text without the use of labels but registers (like jalr for example) you will need to return an integer (the string is not necessary) that indicates the position to jump to. This is because an instruction like "jalr $t1, $t2" has the value contained in $t2 as an address (which could be any value) while "j label" simply uses the label address.

(OPTIONAL PART) In program_counter.py:
This is necessary if you run a jump or branch type instruction that allows a jump using the instruction address in the text (essentially the program counter) or for load and save instructions with text names (example: "la $a0, main" and "main: ..." is a line of text (not in .data). To have a correct program counter value, it is necessary that the number of pseudo-instructions generated for the text instructions is actually simulated. If the text contains instructions for which the program counter is not simulated, it is best not to add the -pc option and it is necessary not to make use of particular described inputs ("la $a0, main" or "jal and jalr" instructions) as the values will be wrong and the execution will give incorrect results or will stop with errors.

You need to understand how many pseudo-instructions are generated depending on the type of input entered for each instruction. Instructions can generate from 0 to more pseudo-instructions. So you should understand if that particular instruction generates a certain number of pseudo-instructions for certain inputs.
Example: the add instruction, if a number is added that is not in the range from 32767 to -32768, generates 2 pseudo-instructions.
You can then put instructions that have the same number of pseudo-instructions for those particular situations in common sets. Add to address_text + 4 for each pseudo-instruction.
For new cases, add a variable that contains the name of the instruction as a string. Handle the new case by adding a new condition (elif) with the occurrence of the new variable (instruction == new variable). 
Now it all depends on the evaluated inputs: for example, an addi set instruction does not add new pseudo-instructions when the third input is a register (the value is a boolean) or
a character (if character_found), or when the third input is an integer that is in the range 32767 to -32768 (self.range_meno_trenta <= value <= self.range_piu_trenta, the range depends on the evaluated instruction) (if it is hexadecimal it is still previously converted to decimal and must respect this range), otherwise two pseudo-instructions are necessary, so the method "trova_indirizzo_testo_corretto(self, address_text, 2)" is called, which must always contain self, address_text, and the number of pseudo-instructions to add, in this case 2. If more instructions generate the same number of pseudo-instructions for the same inputs then just create a set containing the names of the instructions and change the condition (elif) with "instruction in new set".


These are just some instructions on how to proceed with the simulator and instructions on how to add new MIPS instructions. The current simulator is incomplete. Other instructions need to be added.

This simulator is useful to learn how pipelining works. Have fun using it.


